/** @mainpage Projeto Final PARI
 *
 * @section intro_sec Descrição Geral
 *
 * Programa para aquisição e envio de dados de sensores de um arduino, utilizando 
 comunicação por bluetooth e display desses dados juntamente com uma animação numa aplicação GTK.
 *
 * Para um acompanhamento mais detalhado do percurso do projeto consultar: https://github.com/TiagoSMarques/PARI-inclinometro
 *
 * @author  Tiago Marques nº 73138
 * @section exerc_sec Projeto Final

Para usar cmake, o principal é criar o ficheiro CMakeLists.txt.
Uma versão minimalista é a seguinte :
\code {.sh}
#-------------------------------------------------------------------------
cmake_minimum_required (VERSION 2.8)
project (Aula14Ex5+)
set(PROG myf)
set(SOURCES src/main.c src/aux.c src/callbacks.c)
add_executable(${PROG} ${SOURCES})
#-------------------------------------------------------------------------
\endcode

Para se testar o sucesso da deteção de uma biblioteca externa, como por exemplo
o OpenCV e tomar alguma decisão alternativa, podia-se usar um código similar a este:

\code {.sh}
find_package( OpenCV REQUIRED )
if ( NOT OpenCV_FOUND )
        message(FATAL_ERROR "Package OpenCV required but not found!")
endif( NOT OpenCV_FOUND )
\endcode

Para gerar a documentação Doxygen alguns passos standard podem ser recomendados:
\verbatim
        1-Criar um ficheiro de configuração genérico: Doxyfile.in
        2-Criar o ficheiro de mainpage.dox para a descrição geral do projeto
        3-Criar um target dedicado e outras intruções na CMakeLists.txt
        4-Criar eventuais ficheiros auxiliares à documentação (como um logotipo, etc.)
\endverbatim

Para se criar o target para gerar documentação, o código da CMakeLists.txt poderá ser algo parecido ao seguinte:

\code {.sh}
find_package(Doxygen)
option(BUILD_DOCUMENTATION "Create and install doc (requires Doxygen)" ${DOXYGEN_FOUND})
if(BUILD_DOCUMENTATION)
    if(NOT DOXYGEN_FOUND)
        message(FATAL_ERROR "Doxygen is needed to build the documentation.")
    endif()
    set(doxyfile_in "${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile.in" )
    set(doxyfile "${CMAKE_CURRENT_BINARY_DIR}/Doxyfile")
    set(doxy_main_page "${CMAKE_CURRENT_SOURCE_DIR}/doc/mainpage.dox")
    configure_file(${doxyfile_in} ${doxyfile} @ONLY)
    add_custom_target(doc
        COMMAND ${DOXYGEN_EXECUTABLE}
        WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM)
endif()
#code inspired on: http://www.tty1.net/blog/2014/cmake-doxygen_en.html
\endcode

*/
